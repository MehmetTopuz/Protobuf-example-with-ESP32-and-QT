// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hydroponic_data.proto

#include "hydroponic_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hydroponic_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataPackage_hydroponic_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hydroponic_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeat_hydroponic_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hydroponic_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageError_hydroponic_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hydroponic_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageOk_hydroponic_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hydroponic_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageTimeout_hydroponic_5fdata_2eproto;
namespace hydroponic {
class HydroponicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hydroponic> _instance;
} _Hydroponic_default_instance_;
class DataPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataPackage> _instance;
} _DataPackage_default_instance_;
class HeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeat> _instance;
} _HeartBeat_default_instance_;
class MessageOkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageOk> _instance;
} _MessageOk_default_instance_;
class MessageErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageError> _instance;
} _MessageError_default_instance_;
class MessageTimeoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageTimeout> _instance;
} _MessageTimeout_default_instance_;
}  // namespace hydroponic
static void InitDefaultsscc_info_DataPackage_hydroponic_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hydroponic::_DataPackage_default_instance_;
    new (ptr) ::hydroponic::DataPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataPackage_hydroponic_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataPackage_hydroponic_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_HeartBeat_hydroponic_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hydroponic::_HeartBeat_default_instance_;
    new (ptr) ::hydroponic::HeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeat_hydroponic_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartBeat_hydroponic_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_Hydroponic_hydroponic_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hydroponic::_Hydroponic_default_instance_;
    new (ptr) ::hydroponic::Hydroponic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Hydroponic_hydroponic_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Hydroponic_hydroponic_5fdata_2eproto}, {
      &scc_info_DataPackage_hydroponic_5fdata_2eproto.base,
      &scc_info_HeartBeat_hydroponic_5fdata_2eproto.base,
      &scc_info_MessageOk_hydroponic_5fdata_2eproto.base,
      &scc_info_MessageError_hydroponic_5fdata_2eproto.base,
      &scc_info_MessageTimeout_hydroponic_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_MessageError_hydroponic_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hydroponic::_MessageError_default_instance_;
    new (ptr) ::hydroponic::MessageError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageError_hydroponic_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageError_hydroponic_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_MessageOk_hydroponic_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hydroponic::_MessageOk_default_instance_;
    new (ptr) ::hydroponic::MessageOk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageOk_hydroponic_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageOk_hydroponic_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_MessageTimeout_hydroponic_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hydroponic::_MessageTimeout_default_instance_;
    new (ptr) ::hydroponic::MessageTimeout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageTimeout_hydroponic_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageTimeout_hydroponic_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hydroponic_5fdata_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_hydroponic_5fdata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hydroponic_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hydroponic_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hydroponic::Hydroponic, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::hydroponic::Hydroponic, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hydroponic::Hydroponic, messagetype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::hydroponic::Hydroponic, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, messagetype_),
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, deviceid_),
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, sector_),
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, econductivity_),
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, ph_),
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, moisture_),
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, temperature_),
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, waterlevel_),
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, valvestate_),
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, pumpstate_),
  PROTOBUF_FIELD_OFFSET(::hydroponic::DataPackage, ledstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hydroponic::HeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hydroponic::HeartBeat, elapsedtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hydroponic::MessageOk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hydroponic::MessageOk, responsemessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hydroponic::MessageError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hydroponic::MessageError, errortype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hydroponic::MessageTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hydroponic::MessageTimeout, timeoutmessage_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hydroponic::Hydroponic)},
  { 12, -1, sizeof(::hydroponic::DataPackage)},
  { 28, -1, sizeof(::hydroponic::HeartBeat)},
  { 34, -1, sizeof(::hydroponic::MessageOk)},
  { 40, -1, sizeof(::hydroponic::MessageError)},
  { 46, -1, sizeof(::hydroponic::MessageTimeout)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hydroponic::_Hydroponic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hydroponic::_DataPackage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hydroponic::_HeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hydroponic::_MessageOk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hydroponic::_MessageError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hydroponic::_MessageTimeout_default_instance_),
};

const char descriptor_table_protodef_hydroponic_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025hydroponic_data.proto\022\nhydroponic\"\261\002\n\n"
  "Hydroponic\022,\n\013messageType\030\001 \001(\0162\027.hydrop"
  "onic.MessageType\022.\n\013dataPackage\030\002 \001(\0132\027."
  "hydroponic.DataPackageH\000\022*\n\theartBeat\030\003 "
  "\001(\0132\025.hydroponic.HeartBeatH\000\022*\n\tmessageO"
  "k\030\004 \001(\0132\025.hydroponic.MessageOkH\000\0220\n\014mess"
  "ageError\030\005 \001(\0132\030.hydroponic.MessageError"
  "H\000\0224\n\016messageTimeout\030\006 \001(\0132\032.hydroponic."
  "MessageTimeoutH\000B\005\n\003msg\"\365\001\n\013DataPackage\022"
  ",\n\013messageType\030\001 \001(\0162\027.hydroponic.Messag"
  "eType\022\020\n\010deviceID\030\002 \001(\r\022\016\n\006sector\030\003 \001(\t\022"
  "\025\n\reConductivity\030\004 \001(\002\022\n\n\002ph\030\005 \001(\002\022\020\n\010mo"
  "isture\030\006 \001(\002\022\023\n\013temperature\030\007 \001(\002\022\022\n\nwat"
  "erLevel\030\010 \001(\r\022\022\n\nvalveState\030\t \001(\010\022\021\n\tpum"
  "pState\030\n \001(\010\022\021\n\tledStatus\030\013 \001(\010\" \n\tHeart"
  "Beat\022\023\n\013elapsedTime\030\001 \001(\r\"$\n\tMessageOk\022\027"
  "\n\017responseMessage\030\001 \001(\t\"!\n\014MessageError\022"
  "\021\n\terrorType\030\001 \001(\t\"(\n\016MessageTimeout\022\026\n\016"
  "timeoutMessage\030\001 \001(\t*[\n\013MessageType\022\022\n\016M"
  "SG_HEART_BEAT\020\000\022\n\n\006MSG_OK\020\001\022\r\n\tMSG_ERROR"
  "\020\002\022\014\n\010MSG_DATA\020\003\022\017\n\013MSG_TIMEOUT\020\004b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hydroponic_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hydroponic_5fdata_2eproto_sccs[6] = {
  &scc_info_DataPackage_hydroponic_5fdata_2eproto.base,
  &scc_info_HeartBeat_hydroponic_5fdata_2eproto.base,
  &scc_info_Hydroponic_hydroponic_5fdata_2eproto.base,
  &scc_info_MessageError_hydroponic_5fdata_2eproto.base,
  &scc_info_MessageOk_hydroponic_5fdata_2eproto.base,
  &scc_info_MessageTimeout_hydroponic_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hydroponic_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hydroponic_5fdata_2eproto = {
  false, false, descriptor_table_protodef_hydroponic_5fdata_2eproto, "hydroponic_data.proto", 841,
  &descriptor_table_hydroponic_5fdata_2eproto_once, descriptor_table_hydroponic_5fdata_2eproto_sccs, descriptor_table_hydroponic_5fdata_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_hydroponic_5fdata_2eproto::offsets,
  file_level_metadata_hydroponic_5fdata_2eproto, 6, file_level_enum_descriptors_hydroponic_5fdata_2eproto, file_level_service_descriptors_hydroponic_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hydroponic_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hydroponic_5fdata_2eproto)), true);
namespace hydroponic {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hydroponic_5fdata_2eproto);
  return file_level_enum_descriptors_hydroponic_5fdata_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Hydroponic::_Internal {
 public:
  static const ::hydroponic::DataPackage& datapackage(const Hydroponic* msg);
  static const ::hydroponic::HeartBeat& heartbeat(const Hydroponic* msg);
  static const ::hydroponic::MessageOk& messageok(const Hydroponic* msg);
  static const ::hydroponic::MessageError& messageerror(const Hydroponic* msg);
  static const ::hydroponic::MessageTimeout& messagetimeout(const Hydroponic* msg);
};

const ::hydroponic::DataPackage&
Hydroponic::_Internal::datapackage(const Hydroponic* msg) {
  return *msg->msg_.datapackage_;
}
const ::hydroponic::HeartBeat&
Hydroponic::_Internal::heartbeat(const Hydroponic* msg) {
  return *msg->msg_.heartbeat_;
}
const ::hydroponic::MessageOk&
Hydroponic::_Internal::messageok(const Hydroponic* msg) {
  return *msg->msg_.messageok_;
}
const ::hydroponic::MessageError&
Hydroponic::_Internal::messageerror(const Hydroponic* msg) {
  return *msg->msg_.messageerror_;
}
const ::hydroponic::MessageTimeout&
Hydroponic::_Internal::messagetimeout(const Hydroponic* msg) {
  return *msg->msg_.messagetimeout_;
}
void Hydroponic::set_allocated_datapackage(::hydroponic::DataPackage* datapackage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (datapackage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(datapackage);
    if (message_arena != submessage_arena) {
      datapackage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datapackage, submessage_arena);
    }
    set_has_datapackage();
    msg_.datapackage_ = datapackage;
  }
  // @@protoc_insertion_point(field_set_allocated:hydroponic.Hydroponic.dataPackage)
}
void Hydroponic::set_allocated_heartbeat(::hydroponic::HeartBeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    msg_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:hydroponic.Hydroponic.heartBeat)
}
void Hydroponic::set_allocated_messageok(::hydroponic::MessageOk* messageok) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (messageok) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messageok);
    if (message_arena != submessage_arena) {
      messageok = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageok, submessage_arena);
    }
    set_has_messageok();
    msg_.messageok_ = messageok;
  }
  // @@protoc_insertion_point(field_set_allocated:hydroponic.Hydroponic.messageOk)
}
void Hydroponic::set_allocated_messageerror(::hydroponic::MessageError* messageerror) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (messageerror) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messageerror);
    if (message_arena != submessage_arena) {
      messageerror = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageerror, submessage_arena);
    }
    set_has_messageerror();
    msg_.messageerror_ = messageerror;
  }
  // @@protoc_insertion_point(field_set_allocated:hydroponic.Hydroponic.messageError)
}
void Hydroponic::set_allocated_messagetimeout(::hydroponic::MessageTimeout* messagetimeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (messagetimeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messagetimeout);
    if (message_arena != submessage_arena) {
      messagetimeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messagetimeout, submessage_arena);
    }
    set_has_messagetimeout();
    msg_.messagetimeout_ = messagetimeout;
  }
  // @@protoc_insertion_point(field_set_allocated:hydroponic.Hydroponic.messageTimeout)
}
Hydroponic::Hydroponic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hydroponic.Hydroponic)
}
Hydroponic::Hydroponic(const Hydroponic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  messagetype_ = from.messagetype_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kDataPackage: {
      _internal_mutable_datapackage()->::hydroponic::DataPackage::MergeFrom(from._internal_datapackage());
      break;
    }
    case kHeartBeat: {
      _internal_mutable_heartbeat()->::hydroponic::HeartBeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kMessageOk: {
      _internal_mutable_messageok()->::hydroponic::MessageOk::MergeFrom(from._internal_messageok());
      break;
    }
    case kMessageError: {
      _internal_mutable_messageerror()->::hydroponic::MessageError::MergeFrom(from._internal_messageerror());
      break;
    }
    case kMessageTimeout: {
      _internal_mutable_messagetimeout()->::hydroponic::MessageTimeout::MergeFrom(from._internal_messagetimeout());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:hydroponic.Hydroponic)
}

void Hydroponic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hydroponic_hydroponic_5fdata_2eproto.base);
  messagetype_ = 0;
  clear_has_msg();
}

Hydroponic::~Hydroponic() {
  // @@protoc_insertion_point(destructor:hydroponic.Hydroponic)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Hydroponic::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void Hydroponic::ArenaDtor(void* object) {
  Hydroponic* _this = reinterpret_cast< Hydroponic* >(object);
  (void)_this;
}
void Hydroponic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hydroponic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hydroponic& Hydroponic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hydroponic_hydroponic_5fdata_2eproto.base);
  return *internal_default_instance();
}


void Hydroponic::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:hydroponic.Hydroponic)
  switch (msg_case()) {
    case kDataPackage: {
      if (GetArena() == nullptr) {
        delete msg_.datapackage_;
      }
      break;
    }
    case kHeartBeat: {
      if (GetArena() == nullptr) {
        delete msg_.heartbeat_;
      }
      break;
    }
    case kMessageOk: {
      if (GetArena() == nullptr) {
        delete msg_.messageok_;
      }
      break;
    }
    case kMessageError: {
      if (GetArena() == nullptr) {
        delete msg_.messageerror_;
      }
      break;
    }
    case kMessageTimeout: {
      if (GetArena() == nullptr) {
        delete msg_.messagetimeout_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void Hydroponic::Clear() {
// @@protoc_insertion_point(message_clear_start:hydroponic.Hydroponic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messagetype_ = 0;
  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hydroponic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .hydroponic.MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::hydroponic::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .hydroponic.DataPackage dataPackage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_datapackage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .hydroponic.HeartBeat heartBeat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .hydroponic.MessageOk messageOk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageok(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .hydroponic.MessageError messageError = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_messageerror(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .hydroponic.MessageTimeout messageTimeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_messagetimeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hydroponic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hydroponic.Hydroponic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .hydroponic.MessageType messageType = 1;
  if (this->messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // .hydroponic.DataPackage dataPackage = 2;
  if (_internal_has_datapackage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::datapackage(this), target, stream);
  }

  // .hydroponic.HeartBeat heartBeat = 3;
  if (_internal_has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::heartbeat(this), target, stream);
  }

  // .hydroponic.MessageOk messageOk = 4;
  if (_internal_has_messageok()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::messageok(this), target, stream);
  }

  // .hydroponic.MessageError messageError = 5;
  if (_internal_has_messageerror()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::messageerror(this), target, stream);
  }

  // .hydroponic.MessageTimeout messageTimeout = 6;
  if (_internal_has_messagetimeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::messagetimeout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hydroponic.Hydroponic)
  return target;
}

size_t Hydroponic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hydroponic.Hydroponic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hydroponic.MessageType messageType = 1;
  if (this->messagetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  switch (msg_case()) {
    // .hydroponic.DataPackage dataPackage = 2;
    case kDataPackage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.datapackage_);
      break;
    }
    // .hydroponic.HeartBeat heartBeat = 3;
    case kHeartBeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.heartbeat_);
      break;
    }
    // .hydroponic.MessageOk messageOk = 4;
    case kMessageOk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.messageok_);
      break;
    }
    // .hydroponic.MessageError messageError = 5;
    case kMessageError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.messageerror_);
      break;
    }
    // .hydroponic.MessageTimeout messageTimeout = 6;
    case kMessageTimeout: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.messagetimeout_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hydroponic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hydroponic.Hydroponic)
  GOOGLE_DCHECK_NE(&from, this);
  const Hydroponic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hydroponic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hydroponic.Hydroponic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hydroponic.Hydroponic)
    MergeFrom(*source);
  }
}

void Hydroponic::MergeFrom(const Hydroponic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hydroponic.Hydroponic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.messagetype() != 0) {
    _internal_set_messagetype(from._internal_messagetype());
  }
  switch (from.msg_case()) {
    case kDataPackage: {
      _internal_mutable_datapackage()->::hydroponic::DataPackage::MergeFrom(from._internal_datapackage());
      break;
    }
    case kHeartBeat: {
      _internal_mutable_heartbeat()->::hydroponic::HeartBeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kMessageOk: {
      _internal_mutable_messageok()->::hydroponic::MessageOk::MergeFrom(from._internal_messageok());
      break;
    }
    case kMessageError: {
      _internal_mutable_messageerror()->::hydroponic::MessageError::MergeFrom(from._internal_messageerror());
      break;
    }
    case kMessageTimeout: {
      _internal_mutable_messagetimeout()->::hydroponic::MessageTimeout::MergeFrom(from._internal_messagetimeout());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void Hydroponic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hydroponic.Hydroponic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hydroponic::CopyFrom(const Hydroponic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hydroponic.Hydroponic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hydroponic::IsInitialized() const {
  return true;
}

void Hydroponic::InternalSwap(Hydroponic* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(messagetype_, other->messagetype_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hydroponic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DataPackage::_Internal {
 public:
};

DataPackage::DataPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hydroponic.DataPackage)
}
DataPackage::DataPackage(const DataPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sector().empty()) {
    sector_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sector(), 
      GetArena());
  }
  ::memcpy(&messagetype_, &from.messagetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ledstatus_) -
    reinterpret_cast<char*>(&messagetype_)) + sizeof(ledstatus_));
  // @@protoc_insertion_point(copy_constructor:hydroponic.DataPackage)
}

void DataPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataPackage_hydroponic_5fdata_2eproto.base);
  sector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&messagetype_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ledstatus_) -
      reinterpret_cast<char*>(&messagetype_)) + sizeof(ledstatus_));
}

DataPackage::~DataPackage() {
  // @@protoc_insertion_point(destructor:hydroponic.DataPackage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataPackage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sector_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataPackage::ArenaDtor(void* object) {
  DataPackage* _this = reinterpret_cast< DataPackage* >(object);
  (void)_this;
}
void DataPackage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataPackage& DataPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataPackage_hydroponic_5fdata_2eproto.base);
  return *internal_default_instance();
}


void DataPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:hydroponic.DataPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sector_.ClearToEmpty();
  ::memset(&messagetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ledstatus_) -
      reinterpret_cast<char*>(&messagetype_)) + sizeof(ledstatus_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .hydroponic.MessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::hydroponic::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 deviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sector();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hydroponic.DataPackage.sector"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float eConductivity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          econductivity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ph = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ph_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float moisture = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          moisture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float temperature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 waterLevel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          waterlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool valveState = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          valvestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pumpState = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          pumpstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ledStatus = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ledstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPackage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hydroponic.DataPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .hydroponic.MessageType messageType = 1;
  if (this->messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // uint32 deviceID = 2;
  if (this->deviceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deviceid(), target);
  }

  // string sector = 3;
  if (this->sector().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sector().data(), static_cast<int>(this->_internal_sector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hydroponic.DataPackage.sector");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sector(), target);
  }

  // float eConductivity = 4;
  if (!(this->econductivity() <= 0 && this->econductivity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_econductivity(), target);
  }

  // float ph = 5;
  if (!(this->ph() <= 0 && this->ph() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ph(), target);
  }

  // float moisture = 6;
  if (!(this->moisture() <= 0 && this->moisture() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_moisture(), target);
  }

  // float temperature = 7;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_temperature(), target);
  }

  // uint32 waterLevel = 8;
  if (this->waterlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_waterlevel(), target);
  }

  // bool valveState = 9;
  if (this->valvestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_valvestate(), target);
  }

  // bool pumpState = 10;
  if (this->pumpstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_pumpstate(), target);
  }

  // bool ledStatus = 11;
  if (this->ledstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_ledstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hydroponic.DataPackage)
  return target;
}

size_t DataPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hydroponic.DataPackage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sector = 3;
  if (this->sector().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sector());
  }

  // .hydroponic.MessageType messageType = 1;
  if (this->messagetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  // uint32 deviceID = 2;
  if (this->deviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deviceid());
  }

  // float eConductivity = 4;
  if (!(this->econductivity() <= 0 && this->econductivity() >= 0)) {
    total_size += 1 + 4;
  }

  // float ph = 5;
  if (!(this->ph() <= 0 && this->ph() >= 0)) {
    total_size += 1 + 4;
  }

  // float moisture = 6;
  if (!(this->moisture() <= 0 && this->moisture() >= 0)) {
    total_size += 1 + 4;
  }

  // float temperature = 7;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 waterLevel = 8;
  if (this->waterlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_waterlevel());
  }

  // bool valveState = 9;
  if (this->valvestate() != 0) {
    total_size += 1 + 1;
  }

  // bool pumpState = 10;
  if (this->pumpstate() != 0) {
    total_size += 1 + 1;
  }

  // bool ledStatus = 11;
  if (this->ledstatus() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPackage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hydroponic.DataPackage)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPackage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPackage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hydroponic.DataPackage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hydroponic.DataPackage)
    MergeFrom(*source);
  }
}

void DataPackage::MergeFrom(const DataPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hydroponic.DataPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sector().size() > 0) {
    _internal_set_sector(from._internal_sector());
  }
  if (from.messagetype() != 0) {
    _internal_set_messagetype(from._internal_messagetype());
  }
  if (from.deviceid() != 0) {
    _internal_set_deviceid(from._internal_deviceid());
  }
  if (!(from.econductivity() <= 0 && from.econductivity() >= 0)) {
    _internal_set_econductivity(from._internal_econductivity());
  }
  if (!(from.ph() <= 0 && from.ph() >= 0)) {
    _internal_set_ph(from._internal_ph());
  }
  if (!(from.moisture() <= 0 && from.moisture() >= 0)) {
    _internal_set_moisture(from._internal_moisture());
  }
  if (!(from.temperature() <= 0 && from.temperature() >= 0)) {
    _internal_set_temperature(from._internal_temperature());
  }
  if (from.waterlevel() != 0) {
    _internal_set_waterlevel(from._internal_waterlevel());
  }
  if (from.valvestate() != 0) {
    _internal_set_valvestate(from._internal_valvestate());
  }
  if (from.pumpstate() != 0) {
    _internal_set_pumpstate(from._internal_pumpstate());
  }
  if (from.ledstatus() != 0) {
    _internal_set_ledstatus(from._internal_ledstatus());
  }
}

void DataPackage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hydroponic.DataPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPackage::CopyFrom(const DataPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hydroponic.DataPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPackage::IsInitialized() const {
  return true;
}

void DataPackage::InternalSwap(DataPackage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sector_.Swap(&other->sector_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataPackage, ledstatus_)
      + sizeof(DataPackage::ledstatus_)
      - PROTOBUF_FIELD_OFFSET(DataPackage, messagetype_)>(
          reinterpret_cast<char*>(&messagetype_),
          reinterpret_cast<char*>(&other->messagetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPackage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HeartBeat::_Internal {
 public:
};

HeartBeat::HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hydroponic.HeartBeat)
}
HeartBeat::HeartBeat(const HeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  elapsedtime_ = from.elapsedtime_;
  // @@protoc_insertion_point(copy_constructor:hydroponic.HeartBeat)
}

void HeartBeat::SharedCtor() {
  elapsedtime_ = 0u;
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:hydroponic.HeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeartBeat::ArenaDtor(void* object) {
  HeartBeat* _this = reinterpret_cast< HeartBeat* >(object);
  (void)_this;
}
void HeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeat& HeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeat_hydroponic_5fdata_2eproto.base);
  return *internal_default_instance();
}


void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:hydroponic.HeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elapsedtime_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 elapsedTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          elapsedtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hydroponic.HeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 elapsedTime = 1;
  if (this->elapsedtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_elapsedtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hydroponic.HeartBeat)
  return target;
}

size_t HeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hydroponic.HeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 elapsedTime = 1;
  if (this->elapsedtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_elapsedtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hydroponic.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hydroponic.HeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hydroponic.HeartBeat)
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hydroponic.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.elapsedtime() != 0) {
    _internal_set_elapsedtime(from._internal_elapsedtime());
  }
}

void HeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hydroponic.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hydroponic.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  return true;
}

void HeartBeat::InternalSwap(HeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(elapsedtime_, other->elapsedtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageOk::_Internal {
 public:
};

MessageOk::MessageOk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hydroponic.MessageOk)
}
MessageOk::MessageOk(const MessageOk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  responsemessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_responsemessage().empty()) {
    responsemessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_responsemessage(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:hydroponic.MessageOk)
}

void MessageOk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageOk_hydroponic_5fdata_2eproto.base);
  responsemessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageOk::~MessageOk() {
  // @@protoc_insertion_point(destructor:hydroponic.MessageOk)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageOk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  responsemessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageOk::ArenaDtor(void* object) {
  MessageOk* _this = reinterpret_cast< MessageOk* >(object);
  (void)_this;
}
void MessageOk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageOk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageOk& MessageOk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageOk_hydroponic_5fdata_2eproto.base);
  return *internal_default_instance();
}


void MessageOk::Clear() {
// @@protoc_insertion_point(message_clear_start:hydroponic.MessageOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responsemessage_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string responseMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_responsemessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hydroponic.MessageOk.responseMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageOk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hydroponic.MessageOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string responseMessage = 1;
  if (this->responsemessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responsemessage().data(), static_cast<int>(this->_internal_responsemessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hydroponic.MessageOk.responseMessage");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_responsemessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hydroponic.MessageOk)
  return target;
}

size_t MessageOk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hydroponic.MessageOk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string responseMessage = 1;
  if (this->responsemessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responsemessage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageOk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hydroponic.MessageOk)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageOk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageOk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hydroponic.MessageOk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hydroponic.MessageOk)
    MergeFrom(*source);
  }
}

void MessageOk::MergeFrom(const MessageOk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hydroponic.MessageOk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.responsemessage().size() > 0) {
    _internal_set_responsemessage(from._internal_responsemessage());
  }
}

void MessageOk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hydroponic.MessageOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageOk::CopyFrom(const MessageOk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hydroponic.MessageOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOk::IsInitialized() const {
  return true;
}

void MessageOk::InternalSwap(MessageOk* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responsemessage_.Swap(&other->responsemessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageError::_Internal {
 public:
};

MessageError::MessageError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hydroponic.MessageError)
}
MessageError::MessageError(const MessageError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errortype().empty()) {
    errortype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errortype(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:hydroponic.MessageError)
}

void MessageError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageError_hydroponic_5fdata_2eproto.base);
  errortype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageError::~MessageError() {
  // @@protoc_insertion_point(destructor:hydroponic.MessageError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errortype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageError::ArenaDtor(void* object) {
  MessageError* _this = reinterpret_cast< MessageError* >(object);
  (void)_this;
}
void MessageError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageError& MessageError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageError_hydroponic_5fdata_2eproto.base);
  return *internal_default_instance();
}


void MessageError::Clear() {
// @@protoc_insertion_point(message_clear_start:hydroponic.MessageError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errortype_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string errorType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_errortype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hydroponic.MessageError.errorType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hydroponic.MessageError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string errorType = 1;
  if (this->errortype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errortype().data(), static_cast<int>(this->_internal_errortype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hydroponic.MessageError.errorType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_errortype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hydroponic.MessageError)
  return target;
}

size_t MessageError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hydroponic.MessageError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorType = 1;
  if (this->errortype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errortype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hydroponic.MessageError)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hydroponic.MessageError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hydroponic.MessageError)
    MergeFrom(*source);
  }
}

void MessageError::MergeFrom(const MessageError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hydroponic.MessageError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errortype().size() > 0) {
    _internal_set_errortype(from._internal_errortype());
  }
}

void MessageError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hydroponic.MessageError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageError::CopyFrom(const MessageError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hydroponic.MessageError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageError::IsInitialized() const {
  return true;
}

void MessageError::InternalSwap(MessageError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  errortype_.Swap(&other->errortype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageTimeout::_Internal {
 public:
};

MessageTimeout::MessageTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hydroponic.MessageTimeout)
}
MessageTimeout::MessageTimeout(const MessageTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timeoutmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timeoutmessage().empty()) {
    timeoutmessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timeoutmessage(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:hydroponic.MessageTimeout)
}

void MessageTimeout::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageTimeout_hydroponic_5fdata_2eproto.base);
  timeoutmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageTimeout::~MessageTimeout() {
  // @@protoc_insertion_point(destructor:hydroponic.MessageTimeout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageTimeout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timeoutmessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageTimeout::ArenaDtor(void* object) {
  MessageTimeout* _this = reinterpret_cast< MessageTimeout* >(object);
  (void)_this;
}
void MessageTimeout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageTimeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageTimeout& MessageTimeout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageTimeout_hydroponic_5fdata_2eproto.base);
  return *internal_default_instance();
}


void MessageTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:hydroponic.MessageTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeoutmessage_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageTimeout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string timeoutMessage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_timeoutmessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hydroponic.MessageTimeout.timeoutMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageTimeout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hydroponic.MessageTimeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string timeoutMessage = 1;
  if (this->timeoutmessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timeoutmessage().data(), static_cast<int>(this->_internal_timeoutmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hydroponic.MessageTimeout.timeoutMessage");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_timeoutmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hydroponic.MessageTimeout)
  return target;
}

size_t MessageTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hydroponic.MessageTimeout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string timeoutMessage = 1;
  if (this->timeoutmessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timeoutmessage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageTimeout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hydroponic.MessageTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageTimeout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageTimeout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hydroponic.MessageTimeout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hydroponic.MessageTimeout)
    MergeFrom(*source);
  }
}

void MessageTimeout::MergeFrom(const MessageTimeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hydroponic.MessageTimeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timeoutmessage().size() > 0) {
    _internal_set_timeoutmessage(from._internal_timeoutmessage());
  }
}

void MessageTimeout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hydroponic.MessageTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageTimeout::CopyFrom(const MessageTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hydroponic.MessageTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageTimeout::IsInitialized() const {
  return true;
}

void MessageTimeout::InternalSwap(MessageTimeout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  timeoutmessage_.Swap(&other->timeoutmessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageTimeout::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hydroponic
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hydroponic::Hydroponic* Arena::CreateMaybeMessage< ::hydroponic::Hydroponic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hydroponic::Hydroponic >(arena);
}
template<> PROTOBUF_NOINLINE ::hydroponic::DataPackage* Arena::CreateMaybeMessage< ::hydroponic::DataPackage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hydroponic::DataPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::hydroponic::HeartBeat* Arena::CreateMaybeMessage< ::hydroponic::HeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hydroponic::HeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::hydroponic::MessageOk* Arena::CreateMaybeMessage< ::hydroponic::MessageOk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hydroponic::MessageOk >(arena);
}
template<> PROTOBUF_NOINLINE ::hydroponic::MessageError* Arena::CreateMaybeMessage< ::hydroponic::MessageError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hydroponic::MessageError >(arena);
}
template<> PROTOBUF_NOINLINE ::hydroponic::MessageTimeout* Arena::CreateMaybeMessage< ::hydroponic::MessageTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hydroponic::MessageTimeout >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
