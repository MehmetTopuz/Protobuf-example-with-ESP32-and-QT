/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_HYDROPONICDATA_HYDROPONIC_DATA_PB_H_INCLUDED
#define PB_HYDROPONICDATA_HYDROPONIC_DATA_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _hydroponicData_MessageType {
    hydroponicData_MessageType_MSG_HEART_BEAT = 0,
    hydroponicData_MessageType_MSG_OK = 1,
    hydroponicData_MessageType_MSG_ERROR = 2,
    hydroponicData_MessageType_MSG_DATA = 3,
    hydroponicData_MessageType_MSG_TIMEOUT = 4
} hydroponicData_MessageType;

/* Struct definitions */
typedef struct _hydroponicData_hDataPacket {
    hydroponicData_MessageType messageType;
    uint32_t deviceID;
    pb_callback_t sector;
    float eConductivity;
    float ph;
    float moisture;
    float temperature;
    uint32_t waterLevel;
    bool valveState;
    bool pumpState;
    bool ledStatus;
} hydroponicData_hDataPacket;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _hydroponicData_MessageType_MIN hydroponicData_MessageType_MSG_HEART_BEAT
#define _hydroponicData_MessageType_MAX hydroponicData_MessageType_MSG_TIMEOUT
#define _hydroponicData_MessageType_ARRAYSIZE ((hydroponicData_MessageType)(hydroponicData_MessageType_MSG_TIMEOUT+1))

#define hydroponicData_hDataPacket_messageType_ENUMTYPE hydroponicData_MessageType


/* Initializer values for message structs */
#define hydroponicData_hDataPacket_init_default  {_hydroponicData_MessageType_MIN, 0, {{NULL}, NULL}, 0, 0, 0, 0, 0, 0, 0, 0}
#define hydroponicData_hDataPacket_init_zero     {_hydroponicData_MessageType_MIN, 0, {{NULL}, NULL}, 0, 0, 0, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define hydroponicData_hDataPacket_messageType_tag 1
#define hydroponicData_hDataPacket_deviceID_tag  2
#define hydroponicData_hDataPacket_sector_tag    3
#define hydroponicData_hDataPacket_eConductivity_tag 4
#define hydroponicData_hDataPacket_ph_tag        5
#define hydroponicData_hDataPacket_moisture_tag  6
#define hydroponicData_hDataPacket_temperature_tag 7
#define hydroponicData_hDataPacket_waterLevel_tag 8
#define hydroponicData_hDataPacket_valveState_tag 9
#define hydroponicData_hDataPacket_pumpState_tag 10
#define hydroponicData_hDataPacket_ledStatus_tag 11

/* Struct field encoding specification for nanopb */
#define hydroponicData_hDataPacket_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    messageType,       1) \
X(a, STATIC,   SINGULAR, UINT32,   deviceID,          2) \
X(a, CALLBACK, SINGULAR, STRING,   sector,            3) \
X(a, STATIC,   SINGULAR, FLOAT,    eConductivity,     4) \
X(a, STATIC,   SINGULAR, FLOAT,    ph,                5) \
X(a, STATIC,   SINGULAR, FLOAT,    moisture,          6) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       7) \
X(a, STATIC,   SINGULAR, UINT32,   waterLevel,        8) \
X(a, STATIC,   SINGULAR, BOOL,     valveState,        9) \
X(a, STATIC,   SINGULAR, BOOL,     pumpState,        10) \
X(a, STATIC,   SINGULAR, BOOL,     ledStatus,        11)
#define hydroponicData_hDataPacket_CALLBACK pb_default_field_callback
#define hydroponicData_hDataPacket_DEFAULT NULL

extern const pb_msgdesc_t hydroponicData_hDataPacket_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define hydroponicData_hDataPacket_fields &hydroponicData_hDataPacket_msg

/* Maximum encoded size of messages (where known) */
/* hydroponicData_hDataPacket_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
