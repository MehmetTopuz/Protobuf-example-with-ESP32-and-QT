// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hydroponic_data.proto

#include "hydroponic_data.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace hydroponicData {

inline constexpr hDataPacket::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        messagetype_{static_cast< ::hydroponicData::MessageType >(0)},
        deviceid_{0u},
        econductivity_{0},
        ph_{0},
        moisture_{0},
        temperature_{0},
        waterlevel_{0u},
        valvestate_{false},
        pumpstate_{false},
        ledstatus_{false} {}

template <typename>
PROTOBUF_CONSTEXPR hDataPacket::hDataPacket(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct hDataPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR hDataPacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~hDataPacketDefaultTypeInternal() {}
  union {
    hDataPacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 hDataPacketDefaultTypeInternal _hDataPacket_default_instance_;
}  // namespace hydroponicData
static ::_pb::Metadata file_level_metadata_hydroponic_5fdata_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_hydroponic_5fdata_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_hydroponic_5fdata_2eproto = nullptr;
const ::uint32_t TableStruct_hydroponic_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_.messagetype_),
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_.deviceid_),
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_.sector_),
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_.econductivity_),
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_.ph_),
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_.moisture_),
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_.temperature_),
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_.waterlevel_),
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_.valvestate_),
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_.pumpstate_),
    PROTOBUF_FIELD_OFFSET(::hydroponicData::hDataPacket, _impl_.ledstatus_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 19, -1, sizeof(::hydroponicData::hDataPacket)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::hydroponicData::_hDataPacket_default_instance_._instance,
};
const char descriptor_table_protodef_hydroponic_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025hydroponic_data.proto\022\016hydroponicData\""
    "\241\003\n\013hDataPacket\0220\n\013messageType\030\001 \001(\0162\033.h"
    "ydroponicData.MessageType\022\020\n\010deviceID\030\002 "
    "\001(\r\022\023\n\006sector\030\003 \001(\tH\000\210\001\001\022\032\n\reConductivit"
    "y\030\004 \001(\002H\001\210\001\001\022\017\n\002ph\030\005 \001(\002H\002\210\001\001\022\025\n\010moistur"
    "e\030\006 \001(\002H\003\210\001\001\022\030\n\013temperature\030\007 \001(\002H\004\210\001\001\022\027"
    "\n\nwaterLevel\030\010 \001(\rH\005\210\001\001\022\027\n\nvalveState\030\t "
    "\001(\010H\006\210\001\001\022\026\n\tpumpState\030\n \001(\010H\007\210\001\001\022\026\n\tledS"
    "tatus\030\013 \001(\010H\010\210\001\001B\t\n\007_sectorB\020\n\016_eConduct"
    "ivityB\005\n\003_phB\013\n\t_moistureB\016\n\014_temperatur"
    "eB\r\n\013_waterLevelB\r\n\013_valveStateB\014\n\n_pump"
    "StateB\014\n\n_ledStatus*[\n\013MessageType\022\022\n\016MS"
    "G_HEART_BEAT\020\000\022\n\n\006MSG_OK\020\001\022\r\n\tMSG_ERROR\020"
    "\002\022\014\n\010MSG_DATA\020\003\022\017\n\013MSG_TIMEOUT\020\004b\006proto3"
};
static ::absl::once_flag descriptor_table_hydroponic_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hydroponic_5fdata_2eproto = {
    false,
    false,
    560,
    descriptor_table_protodef_hydroponic_5fdata_2eproto,
    "hydroponic_data.proto",
    &descriptor_table_hydroponic_5fdata_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_hydroponic_5fdata_2eproto::offsets,
    file_level_metadata_hydroponic_5fdata_2eproto,
    file_level_enum_descriptors_hydroponic_5fdata_2eproto,
    file_level_service_descriptors_hydroponic_5fdata_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hydroponic_5fdata_2eproto_getter() {
  return &descriptor_table_hydroponic_5fdata_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hydroponic_5fdata_2eproto(&descriptor_table_hydroponic_5fdata_2eproto);
namespace hydroponicData {
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_hydroponic_5fdata_2eproto);
  return file_level_enum_descriptors_hydroponic_5fdata_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MessageType_internal_data_[] = {
    327680u, 0u, };
bool MessageType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
// ===================================================================

class hDataPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<hDataPacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_._has_bits_);
  static void set_has_sector(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_econductivity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ph(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_moisture(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_waterlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_valvestate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pumpstate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ledstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

hDataPacket::hDataPacket(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hydroponicData.hDataPacket)
}
inline PROTOBUF_NDEBUG_INLINE hDataPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        sector_(arena, from.sector_) {}

hDataPacket::hDataPacket(
    ::google::protobuf::Arena* arena,
    const hDataPacket& from)
    : ::google::protobuf::Message(arena) {
  hDataPacket* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, messagetype_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, messagetype_),
           offsetof(Impl_, ledstatus_) -
               offsetof(Impl_, messagetype_) +
               sizeof(Impl_::ledstatus_));

  // @@protoc_insertion_point(copy_constructor:hydroponicData.hDataPacket)
}
inline PROTOBUF_NDEBUG_INLINE hDataPacket::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        sector_(arena) {}

inline void hDataPacket::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, messagetype_),
           0,
           offsetof(Impl_, ledstatus_) -
               offsetof(Impl_, messagetype_) +
               sizeof(Impl_::ledstatus_));
}
hDataPacket::~hDataPacket() {
  // @@protoc_insertion_point(destructor:hydroponicData.hDataPacket)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void hDataPacket::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.sector_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void hDataPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:hydroponicData.hDataPacket)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.sector_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.messagetype_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.deviceid_) -
      reinterpret_cast<char*>(&_impl_.messagetype_)) + sizeof(_impl_.deviceid_));
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.econductivity_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pumpstate_) -
        reinterpret_cast<char*>(&_impl_.econductivity_)) + sizeof(_impl_.pumpstate_));
  }
  _impl_.ledstatus_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* hDataPacket::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 49, 2> hDataPacket::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_hDataPacket_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .hydroponicData.MessageType messageType = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(hDataPacket, _impl_.messagetype_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.messagetype_)}},
    // uint32 deviceID = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(hDataPacket, _impl_.deviceid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.deviceid_)}},
    // optional string sector = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.sector_)}},
    // optional float eConductivity = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 1, 0, PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.econductivity_)}},
    // optional float ph = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 2, 0, PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.ph_)}},
    // optional float moisture = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 3, 0, PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.moisture_)}},
    // optional float temperature = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 4, 0, PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.temperature_)}},
    // optional uint32 waterLevel = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(hDataPacket, _impl_.waterlevel_), 5>(),
     {64, 5, 0, PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.waterlevel_)}},
    // optional bool valveState = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(hDataPacket, _impl_.valvestate_), 6>(),
     {72, 6, 0, PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.valvestate_)}},
    // optional bool pumpState = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(hDataPacket, _impl_.pumpstate_), 7>(),
     {80, 7, 0, PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.pumpstate_)}},
    // optional bool ledStatus = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(hDataPacket, _impl_.ledstatus_), 8>(),
     {88, 8, 0, PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.ledstatus_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .hydroponicData.MessageType messageType = 1;
    {PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.messagetype_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint32 deviceID = 2;
    {PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.deviceid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // optional string sector = 3;
    {PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.sector_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional float eConductivity = 4;
    {PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.econductivity_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float ph = 5;
    {PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.ph_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float moisture = 6;
    {PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.moisture_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float temperature = 7;
    {PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.temperature_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 waterLevel = 8;
    {PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.waterlevel_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool valveState = 9;
    {PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.valvestate_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool pumpState = 10;
    {PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.pumpstate_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool ledStatus = 11;
    {PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.ledstatus_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\32\0\0\6\0\0\0\0\0\0\0\0\0\0\0\0"
    "hydroponicData.hDataPacket"
    "sector"
  }},
};

::uint8_t* hDataPacket::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hydroponicData.hDataPacket)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .hydroponicData.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_messagetype(), target);
  }

  // uint32 deviceID = 2;
  if (this->_internal_deviceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_deviceid(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string sector = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_sector();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "hydroponicData.hDataPacket.sector");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional float eConductivity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_econductivity(), target);
  }

  // optional float ph = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_ph(), target);
  }

  // optional float moisture = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_moisture(), target);
  }

  // optional float temperature = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_temperature(), target);
  }

  // optional uint32 waterLevel = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_waterlevel(), target);
  }

  // optional bool valveState = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_valvestate(), target);
  }

  // optional bool pumpState = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_pumpstate(), target);
  }

  // optional bool ledStatus = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_ledstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hydroponicData.hDataPacket)
  return target;
}

::size_t hDataPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hydroponicData.hDataPacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string sector = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sector());
  }

  // .hydroponicData.MessageType messageType = 1;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  // uint32 deviceID = 2;
  if (this->_internal_deviceid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_deviceid());
  }

  if (cached_has_bits & 0x000000feu) {
    // optional float eConductivity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5;
    }

    // optional float ph = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 5;
    }

    // optional float moisture = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

    // optional float temperature = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

    // optional uint32 waterLevel = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_waterlevel());
    }

    // optional bool valveState = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool pumpState = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  // optional bool ledStatus = 11;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData hDataPacket::_class_data_ = {
    hDataPacket::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* hDataPacket::GetClassData() const {
  return &_class_data_;
}

void hDataPacket::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<hDataPacket*>(&to_msg);
  auto& from = static_cast<const hDataPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hydroponicData.hDataPacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  if (from._internal_deviceid() != 0) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.econductivity_ = from._impl_.econductivity_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ph_ = from._impl_.ph_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.moisture_ = from._impl_.moisture_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.temperature_ = from._impl_.temperature_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.waterlevel_ = from._impl_.waterlevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.valvestate_ = from._impl_.valvestate_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.pumpstate_ = from._impl_.pumpstate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_ledstatus(from._internal_ledstatus());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void hDataPacket::CopyFrom(const hDataPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hydroponicData.hDataPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool hDataPacket::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* hDataPacket::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void hDataPacket::InternalSwap(hDataPacket* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.ledstatus_)
      + sizeof(hDataPacket::_impl_.ledstatus_)
      - PROTOBUF_FIELD_OFFSET(hDataPacket, _impl_.messagetype_)>(
          reinterpret_cast<char*>(&_impl_.messagetype_),
          reinterpret_cast<char*>(&other->_impl_.messagetype_));
}

::google::protobuf::Metadata hDataPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hydroponic_5fdata_2eproto_getter, &descriptor_table_hydroponic_5fdata_2eproto_once,
      file_level_metadata_hydroponic_5fdata_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace hydroponicData
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
