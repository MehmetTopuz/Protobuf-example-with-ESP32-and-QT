// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hydroponic_data.proto
// Protobuf C++ Version: 4.25.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_hydroponic_5fdata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_hydroponic_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_hydroponic_5fdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_hydroponic_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_hydroponic_5fdata_2eproto;
namespace hydroponicData {
class hDataPacket;
struct hDataPacketDefaultTypeInternal;
extern hDataPacketDefaultTypeInternal _hDataPacket_default_instance_;
}  // namespace hydroponicData
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace hydroponicData {
enum MessageType : int {
  MSG_HEART_BEAT = 0,
  MSG_OK = 1,
  MSG_ERROR = 2,
  MSG_DATA = 3,
  MSG_TIMEOUT = 4,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageType_IsValid(int value);
extern const uint32_t MessageType_internal_data_[];
constexpr MessageType MessageType_MIN = static_cast<MessageType>(0);
constexpr MessageType MessageType_MAX = static_cast<MessageType>(4);
constexpr int MessageType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
MessageType_descriptor();
template <typename T>
const std::string& MessageType_Name(T value) {
  static_assert(std::is_same<T, MessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return MessageType_Name(static_cast<MessageType>(value));
}
template <>
inline const std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MessageType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool MessageType_Parse(absl::string_view name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
      MessageType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class hDataPacket final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hydroponicData.hDataPacket) */ {
 public:
  inline hDataPacket() : hDataPacket(nullptr) {}
  ~hDataPacket() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR hDataPacket(::google::protobuf::internal::ConstantInitialized);

  inline hDataPacket(const hDataPacket& from)
      : hDataPacket(nullptr, from) {}
  hDataPacket(hDataPacket&& from) noexcept
    : hDataPacket() {
    *this = ::std::move(from);
  }

  inline hDataPacket& operator=(const hDataPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline hDataPacket& operator=(hDataPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const hDataPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const hDataPacket* internal_default_instance() {
    return reinterpret_cast<const hDataPacket*>(
               &_hDataPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(hDataPacket& a, hDataPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(hDataPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hDataPacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  hDataPacket* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<hDataPacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const hDataPacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const hDataPacket& from) {
    hDataPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(hDataPacket* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hydroponicData.hDataPacket";
  }
  protected:
  explicit hDataPacket(::google::protobuf::Arena* arena);
  hDataPacket(::google::protobuf::Arena* arena, const hDataPacket& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectorFieldNumber = 3,
    kMessageTypeFieldNumber = 1,
    kDeviceIDFieldNumber = 2,
    kEConductivityFieldNumber = 4,
    kPhFieldNumber = 5,
    kMoistureFieldNumber = 6,
    kTemperatureFieldNumber = 7,
    kWaterLevelFieldNumber = 8,
    kValveStateFieldNumber = 9,
    kPumpStateFieldNumber = 10,
    kLedStatusFieldNumber = 11,
  };
  // optional string sector = 3;
  bool has_sector() const;
  void clear_sector() ;
  const std::string& sector() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sector(Arg_&& arg, Args_... args);
  std::string* mutable_sector();
  PROTOBUF_NODISCARD std::string* release_sector();
  void set_allocated_sector(std::string* value);

  private:
  const std::string& _internal_sector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sector(
      const std::string& value);
  std::string* _internal_mutable_sector();

  public:
  // .hydroponicData.MessageType messageType = 1;
  void clear_messagetype() ;
  ::hydroponicData::MessageType messagetype() const;
  void set_messagetype(::hydroponicData::MessageType value);

  private:
  ::hydroponicData::MessageType _internal_messagetype() const;
  void _internal_set_messagetype(::hydroponicData::MessageType value);

  public:
  // uint32 deviceID = 2;
  void clear_deviceid() ;
  ::uint32_t deviceid() const;
  void set_deviceid(::uint32_t value);

  private:
  ::uint32_t _internal_deviceid() const;
  void _internal_set_deviceid(::uint32_t value);

  public:
  // optional float eConductivity = 4;
  bool has_econductivity() const;
  void clear_econductivity() ;
  float econductivity() const;
  void set_econductivity(float value);

  private:
  float _internal_econductivity() const;
  void _internal_set_econductivity(float value);

  public:
  // optional float ph = 5;
  bool has_ph() const;
  void clear_ph() ;
  float ph() const;
  void set_ph(float value);

  private:
  float _internal_ph() const;
  void _internal_set_ph(float value);

  public:
  // optional float moisture = 6;
  bool has_moisture() const;
  void clear_moisture() ;
  float moisture() const;
  void set_moisture(float value);

  private:
  float _internal_moisture() const;
  void _internal_set_moisture(float value);

  public:
  // optional float temperature = 7;
  bool has_temperature() const;
  void clear_temperature() ;
  float temperature() const;
  void set_temperature(float value);

  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);

  public:
  // optional uint32 waterLevel = 8;
  bool has_waterlevel() const;
  void clear_waterlevel() ;
  ::uint32_t waterlevel() const;
  void set_waterlevel(::uint32_t value);

  private:
  ::uint32_t _internal_waterlevel() const;
  void _internal_set_waterlevel(::uint32_t value);

  public:
  // optional bool valveState = 9;
  bool has_valvestate() const;
  void clear_valvestate() ;
  bool valvestate() const;
  void set_valvestate(bool value);

  private:
  bool _internal_valvestate() const;
  void _internal_set_valvestate(bool value);

  public:
  // optional bool pumpState = 10;
  bool has_pumpstate() const;
  void clear_pumpstate() ;
  bool pumpstate() const;
  void set_pumpstate(bool value);

  private:
  bool _internal_pumpstate() const;
  void _internal_set_pumpstate(bool value);

  public:
  // optional bool ledStatus = 11;
  bool has_ledstatus() const;
  void clear_ledstatus() ;
  bool ledstatus() const;
  void set_ledstatus(bool value);

  private:
  bool _internal_ledstatus() const;
  void _internal_set_ledstatus(bool value);

  public:
  // @@protoc_insertion_point(class_scope:hydroponicData.hDataPacket)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr sector_;
    int messagetype_;
    ::uint32_t deviceid_;
    float econductivity_;
    float ph_;
    float moisture_;
    float temperature_;
    ::uint32_t waterlevel_;
    bool valvestate_;
    bool pumpstate_;
    bool ledstatus_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hydroponic_5fdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// hDataPacket

// .hydroponicData.MessageType messageType = 1;
inline void hDataPacket::clear_messagetype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.messagetype_ = 0;
}
inline ::hydroponicData::MessageType hDataPacket::messagetype() const {
  // @@protoc_insertion_point(field_get:hydroponicData.hDataPacket.messageType)
  return _internal_messagetype();
}
inline void hDataPacket::set_messagetype(::hydroponicData::MessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:hydroponicData.hDataPacket.messageType)
}
inline ::hydroponicData::MessageType hDataPacket::_internal_messagetype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::hydroponicData::MessageType>(_impl_.messagetype_);
}
inline void hDataPacket::_internal_set_messagetype(::hydroponicData::MessageType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.messagetype_ = value;
}

// uint32 deviceID = 2;
inline void hDataPacket::clear_deviceid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.deviceid_ = 0u;
}
inline ::uint32_t hDataPacket::deviceid() const {
  // @@protoc_insertion_point(field_get:hydroponicData.hDataPacket.deviceID)
  return _internal_deviceid();
}
inline void hDataPacket::set_deviceid(::uint32_t value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:hydroponicData.hDataPacket.deviceID)
}
inline ::uint32_t hDataPacket::_internal_deviceid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.deviceid_;
}
inline void hDataPacket::_internal_set_deviceid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.deviceid_ = value;
}

// optional string sector = 3;
inline bool hDataPacket::has_sector() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void hDataPacket::clear_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sector_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& hDataPacket::sector() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hydroponicData.hDataPacket.sector)
  return _internal_sector();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void hDataPacket::set_sector(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sector_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hydroponicData.hDataPacket.sector)
}
inline std::string* hDataPacket::mutable_sector() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sector();
  // @@protoc_insertion_point(field_mutable:hydroponicData.hDataPacket.sector)
  return _s;
}
inline const std::string& hDataPacket::_internal_sector() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sector_.Get();
}
inline void hDataPacket::_internal_set_sector(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sector_.Set(value, GetArena());
}
inline std::string* hDataPacket::_internal_mutable_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sector_.Mutable( GetArena());
}
inline std::string* hDataPacket::release_sector() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hydroponicData.hDataPacket.sector)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sector_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sector_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void hDataPacket::set_allocated_sector(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sector_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sector_.IsDefault()) {
          _impl_.sector_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hydroponicData.hDataPacket.sector)
}

// optional float eConductivity = 4;
inline bool hDataPacket::has_econductivity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void hDataPacket::clear_econductivity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.econductivity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float hDataPacket::econductivity() const {
  // @@protoc_insertion_point(field_get:hydroponicData.hDataPacket.eConductivity)
  return _internal_econductivity();
}
inline void hDataPacket::set_econductivity(float value) {
  _internal_set_econductivity(value);
  // @@protoc_insertion_point(field_set:hydroponicData.hDataPacket.eConductivity)
}
inline float hDataPacket::_internal_econductivity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.econductivity_;
}
inline void hDataPacket::_internal_set_econductivity(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.econductivity_ = value;
}

// optional float ph = 5;
inline bool hDataPacket::has_ph() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void hDataPacket::clear_ph() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ph_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float hDataPacket::ph() const {
  // @@protoc_insertion_point(field_get:hydroponicData.hDataPacket.ph)
  return _internal_ph();
}
inline void hDataPacket::set_ph(float value) {
  _internal_set_ph(value);
  // @@protoc_insertion_point(field_set:hydroponicData.hDataPacket.ph)
}
inline float hDataPacket::_internal_ph() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ph_;
}
inline void hDataPacket::_internal_set_ph(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ph_ = value;
}

// optional float moisture = 6;
inline bool hDataPacket::has_moisture() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void hDataPacket::clear_moisture() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.moisture_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float hDataPacket::moisture() const {
  // @@protoc_insertion_point(field_get:hydroponicData.hDataPacket.moisture)
  return _internal_moisture();
}
inline void hDataPacket::set_moisture(float value) {
  _internal_set_moisture(value);
  // @@protoc_insertion_point(field_set:hydroponicData.hDataPacket.moisture)
}
inline float hDataPacket::_internal_moisture() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.moisture_;
}
inline void hDataPacket::_internal_set_moisture(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.moisture_ = value;
}

// optional float temperature = 7;
inline bool hDataPacket::has_temperature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void hDataPacket::clear_temperature() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.temperature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float hDataPacket::temperature() const {
  // @@protoc_insertion_point(field_get:hydroponicData.hDataPacket.temperature)
  return _internal_temperature();
}
inline void hDataPacket::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:hydroponicData.hDataPacket.temperature)
}
inline float hDataPacket::_internal_temperature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.temperature_;
}
inline void hDataPacket::_internal_set_temperature(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.temperature_ = value;
}

// optional uint32 waterLevel = 8;
inline bool hDataPacket::has_waterlevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void hDataPacket::clear_waterlevel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.waterlevel_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t hDataPacket::waterlevel() const {
  // @@protoc_insertion_point(field_get:hydroponicData.hDataPacket.waterLevel)
  return _internal_waterlevel();
}
inline void hDataPacket::set_waterlevel(::uint32_t value) {
  _internal_set_waterlevel(value);
  // @@protoc_insertion_point(field_set:hydroponicData.hDataPacket.waterLevel)
}
inline ::uint32_t hDataPacket::_internal_waterlevel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.waterlevel_;
}
inline void hDataPacket::_internal_set_waterlevel(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.waterlevel_ = value;
}

// optional bool valveState = 9;
inline bool hDataPacket::has_valvestate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void hDataPacket::clear_valvestate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.valvestate_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool hDataPacket::valvestate() const {
  // @@protoc_insertion_point(field_get:hydroponicData.hDataPacket.valveState)
  return _internal_valvestate();
}
inline void hDataPacket::set_valvestate(bool value) {
  _internal_set_valvestate(value);
  // @@protoc_insertion_point(field_set:hydroponicData.hDataPacket.valveState)
}
inline bool hDataPacket::_internal_valvestate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.valvestate_;
}
inline void hDataPacket::_internal_set_valvestate(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.valvestate_ = value;
}

// optional bool pumpState = 10;
inline bool hDataPacket::has_pumpstate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void hDataPacket::clear_pumpstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pumpstate_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool hDataPacket::pumpstate() const {
  // @@protoc_insertion_point(field_get:hydroponicData.hDataPacket.pumpState)
  return _internal_pumpstate();
}
inline void hDataPacket::set_pumpstate(bool value) {
  _internal_set_pumpstate(value);
  // @@protoc_insertion_point(field_set:hydroponicData.hDataPacket.pumpState)
}
inline bool hDataPacket::_internal_pumpstate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pumpstate_;
}
inline void hDataPacket::_internal_set_pumpstate(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pumpstate_ = value;
}

// optional bool ledStatus = 11;
inline bool hDataPacket::has_ledstatus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void hDataPacket::clear_ledstatus() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ledstatus_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool hDataPacket::ledstatus() const {
  // @@protoc_insertion_point(field_get:hydroponicData.hDataPacket.ledStatus)
  return _internal_ledstatus();
}
inline void hDataPacket::set_ledstatus(bool value) {
  _internal_set_ledstatus(value);
  // @@protoc_insertion_point(field_set:hydroponicData.hDataPacket.ledStatus)
}
inline bool hDataPacket::_internal_ledstatus() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ledstatus_;
}
inline void hDataPacket::_internal_set_ledstatus(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.ledstatus_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace hydroponicData


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::hydroponicData::MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::hydroponicData::MessageType>() {
  return ::hydroponicData::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_hydroponic_5fdata_2eproto_2epb_2eh
